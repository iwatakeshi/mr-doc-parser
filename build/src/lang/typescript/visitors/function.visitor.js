"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Node_1 = require("../Node");
const call_signature_visitor_1 = require("./call_signature.visitor");
const match_1 = require("../../../utils/match");
function visitFunction(source, node, comment, properties) {
    let children = node.children;
    let isAync = false, identifier, type_parameters, formal_parameters, type_annotation;
    if (match_1.default(children[0], 'async')) {
        isAync = true;
        children.shift();
    }
    if (match_1.default(children[0], 'function')) {
        children.shift();
    }
    if (match_1.default(children[0], 'identifier')) {
        identifier = Node_1.createNode(source, children.shift());
    }
    if (match_1.default(children[0], 'call_signature')) {
        let call_signature = call_signature_visitor_1.visitCallSignature(source, children.shift());
        type_parameters = call_signature.type_parameters;
        formal_parameters = call_signature.formal_parameters;
        type_annotation = call_signature.type_annotation;
    }
    return {
        type: 'function',
        context: Node_1.createNode(source, node, properties),
        comment: Node_1.createNode(source, comment, null, true),
        isAync,
        identifier,
        type_parameters,
        formal_parameters,
        type_annotation,
        properties
    };
}
exports.visitFunction = visitFunction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb24udmlzaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9sYW5nL3R5cGVzY3JpcHQvdmlzaXRvcnMvZnVuY3Rpb24udmlzaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUFxRDtBQUVyRCxxRUFBOEQ7QUFFOUQsZ0RBQXlDO0FBRXpDLFNBQWdCLGFBQWEsQ0FDekIsTUFBYyxFQUNkLElBQWdCLEVBQ2hCLE9BQW1CLEVBQ25CLFVBQW1DO0lBRW5DLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDN0IsSUFBSSxNQUFNLEdBQUcsS0FBSyxFQUNkLFVBQVUsRUFDVixlQUFlLEVBQ2YsaUJBQWlCLEVBQ2pCLGVBQWUsQ0FBQztJQUVwQixJQUFJLGVBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUU7UUFDN0IsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNkLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUNwQjtJQUVELElBQUksZUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRTtRQUNoQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDcEI7SUFFRCxJQUFJLGVBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUU7UUFDbEMsVUFBVSxHQUFHLGlCQUFVLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO0tBQ3BEO0lBRUQsSUFBSSxlQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLEVBQUU7UUFDdEMsSUFBSSxjQUFjLEdBQUcsMkNBQWtCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBQ2pFLGVBQWUsR0FBRyxjQUFjLENBQUMsZUFBZSxDQUFDO1FBQ2pELGlCQUFpQixHQUFHLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQztRQUNyRCxlQUFlLEdBQUcsY0FBYyxDQUFDLGVBQWUsQ0FBQztLQUNwRDtJQUVELE9BQU87UUFDSCxJQUFJLEVBQUUsVUFBVTtRQUNoQixPQUFPLEVBQUUsaUJBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQztRQUM3QyxPQUFPLEVBQUUsaUJBQVUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7UUFDaEQsTUFBTTtRQUNOLFVBQVU7UUFDVixlQUFlO1FBQ2YsaUJBQWlCO1FBQ2pCLGVBQWU7UUFDZixVQUFVO0tBQ2IsQ0FBQTtBQUVMLENBQUM7QUE3Q0Qsc0NBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZVByb3BlcnRpZXMsIGNyZWF0ZU5vZGUgfSBmcm9tIFwiLi4vTm9kZVwiO1xuaW1wb3J0IHsgU3ludGF4Tm9kZSB9IGZyb20gXCJ0cmVlLXNpdHRlclwiO1xuaW1wb3J0IHsgdmlzaXRDYWxsU2lnbmF0dXJlIH0gZnJvbSBcIi4vY2FsbF9zaWduYXR1cmUudmlzaXRvclwiO1xuaW1wb3J0IFNvdXJjZSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJmYWNlcy9Tb3VyY2VcIjtcbmltcG9ydCBtYXRjaCBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvbWF0Y2hcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHZpc2l0RnVuY3Rpb24oXG4gICAgc291cmNlOiBTb3VyY2UsXG4gICAgbm9kZTogU3ludGF4Tm9kZSxcbiAgICBjb21tZW50OiBTeW50YXhOb2RlLFxuICAgIHByb3BlcnRpZXM6IFBhcnRpYWw8Tm9kZVByb3BlcnRpZXM+XG4pIHtcbiAgICBsZXQgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGxldCBpc0F5bmMgPSBmYWxzZSxcbiAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgdHlwZV9wYXJhbWV0ZXJzLFxuICAgICAgICBmb3JtYWxfcGFyYW1ldGVycyxcbiAgICAgICAgdHlwZV9hbm5vdGF0aW9uO1xuXG4gICAgaWYgKG1hdGNoKGNoaWxkcmVuWzBdLCAnYXN5bmMnKSkge1xuICAgICAgICBpc0F5bmMgPSB0cnVlO1xuICAgICAgICBjaGlsZHJlbi5zaGlmdCgpO1xuICAgIH1cblxuICAgIGlmIChtYXRjaChjaGlsZHJlblswXSwgJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgY2hpbGRyZW4uc2hpZnQoKTtcbiAgICB9XG5cbiAgICBpZiAobWF0Y2goY2hpbGRyZW5bMF0sICdpZGVudGlmaWVyJykpIHtcbiAgICAgICAgaWRlbnRpZmllciA9IGNyZWF0ZU5vZGUoc291cmNlLCBjaGlsZHJlbi5zaGlmdCgpKVxuICAgIH1cblxuICAgIGlmIChtYXRjaChjaGlsZHJlblswXSwgJ2NhbGxfc2lnbmF0dXJlJykpIHtcbiAgICAgICAgbGV0IGNhbGxfc2lnbmF0dXJlID0gdmlzaXRDYWxsU2lnbmF0dXJlKHNvdXJjZSwgY2hpbGRyZW4uc2hpZnQoKSlcbiAgICAgICAgdHlwZV9wYXJhbWV0ZXJzID0gY2FsbF9zaWduYXR1cmUudHlwZV9wYXJhbWV0ZXJzO1xuICAgICAgICBmb3JtYWxfcGFyYW1ldGVycyA9IGNhbGxfc2lnbmF0dXJlLmZvcm1hbF9wYXJhbWV0ZXJzO1xuICAgICAgICB0eXBlX2Fubm90YXRpb24gPSBjYWxsX3NpZ25hdHVyZS50eXBlX2Fubm90YXRpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2Z1bmN0aW9uJyxcbiAgICAgICAgY29udGV4dDogY3JlYXRlTm9kZShzb3VyY2UsIG5vZGUsIHByb3BlcnRpZXMpLFxuICAgICAgICBjb21tZW50OiBjcmVhdGVOb2RlKHNvdXJjZSwgY29tbWVudCwgbnVsbCwgdHJ1ZSksXG4gICAgICAgIGlzQXluYyxcbiAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgdHlwZV9wYXJhbWV0ZXJzLFxuICAgICAgICBmb3JtYWxfcGFyYW1ldGVycyxcbiAgICAgICAgdHlwZV9hbm5vdGF0aW9uLFxuICAgICAgICBwcm9wZXJ0aWVzXG4gICAgfVxuXG59Il19