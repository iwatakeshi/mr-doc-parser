"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_visitor_1 = require("./node.visitor");
const log_1 = require("../../../utils/log");
const match_1 = require("../../../utils/match");
function visitStatement(source, node, comment, properties) {
    switch (node.type) {
        case 'expression_statement':
            return visitExpressionStatement(source, node, comment, properties);
        case 'export_statement':
            return visitExportStatement(source, node, comment);
        default:
            log_1.default.report(source, node, log_1.ErrorType.NodeTypeNotYetSupported);
            break;
    }
}
exports.visitStatement = visitStatement;
function visitExpressionStatement(source, node, comment, properties) {
    return node_visitor_1.visitNode(source, node.children.shift(), comment, properties);
}
exports.visitExpressionStatement = visitExpressionStatement;
function visitExportStatement(source, node, comment) {
    let children = node.children, isDefaultExport = false;
    if (children.length > 1 && match_1.default(children.shift(), 'export')) {
    }
    if (children.length > 1 && match_1.default(children.shift(), 'default')) {
        isDefaultExport = true;
    }
    return node_visitor_1.visitNode(source, children.shift(), comment, {
        exports: {
            export: true,
            default: isDefaultExport
        }
    });
}
exports.visitExportStatement = visitExportStatement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVtZW50LnZpc2l0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGFuZy90eXBlc2NyaXB0L3Zpc2l0b3JzL3N0YXRlbWVudC52aXNpdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsaURBQTJDO0FBRTNDLDRDQUFvRDtBQUNwRCxnREFBeUM7QUFFekMsU0FBZ0IsY0FBYyxDQUM1QixNQUFjLEVBQ2QsSUFBZ0IsRUFDaEIsT0FBbUIsRUFDbkIsVUFBbUM7SUFFbkMsUUFBTyxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ2hCLEtBQUssc0JBQXNCO1lBQ3pCLE9BQU8sd0JBQXdCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDckUsS0FBSyxrQkFBa0I7WUFDckIsT0FBTyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3JEO1lBQ0UsYUFBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLGVBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQzVELE1BQU07S0FDVDtBQUNILENBQUM7QUFmRCx3Q0FlQztBQUVELFNBQWdCLHdCQUF3QixDQUN0QyxNQUFjLEVBQ2QsSUFBZ0IsRUFDaEIsT0FBbUIsRUFDbkIsVUFBbUM7SUFFbkMsT0FBTyx3QkFBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN2RSxDQUFDO0FBUEQsNERBT0M7QUFFRCxTQUFnQixvQkFBb0IsQ0FDbEMsTUFBYyxFQUNkLElBQWdCLEVBQ2hCLE9BQW1CO0lBRW5CLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQzFCLGVBQWUsR0FBRyxLQUFLLENBQUM7SUFFMUIsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxlQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFFO0tBQzdEO0lBRUQsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxlQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLFNBQVMsQ0FBQyxFQUFFO1FBQzdELGVBQWUsR0FBRyxJQUFJLENBQUM7S0FDeEI7SUFDRCxPQUFPLHdCQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUU7UUFDbEQsT0FBTyxFQUFFO1lBQ1AsTUFBTSxFQUFFLElBQUk7WUFDWixPQUFPLEVBQUUsZUFBZTtTQUN6QjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFwQkQsb0RBb0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZVByb3BlcnRpZXMgfSBmcm9tIFwiLi4vTm9kZVwiO1xuaW1wb3J0IHsgU3ludGF4Tm9kZSB9IGZyb20gXCJ0cmVlLXNpdHRlclwiO1xuaW1wb3J0IHsgdmlzaXROb2RlIH0gZnJvbSBcIi4vbm9kZS52aXNpdG9yXCI7XG5pbXBvcnQgU291cmNlIGZyb20gXCIuLi8uLi8uLi9pbnRlcmZhY2VzL1NvdXJjZVwiO1xuaW1wb3J0IGxvZywgeyBFcnJvclR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvbG9nXCI7XG5pbXBvcnQgbWF0Y2ggZnJvbSBcIi4uLy4uLy4uL3V0aWxzL21hdGNoXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB2aXNpdFN0YXRlbWVudChcbiAgc291cmNlOiBTb3VyY2UsXG4gIG5vZGU6IFN5bnRheE5vZGUsXG4gIGNvbW1lbnQ6IFN5bnRheE5vZGUsXG4gIHByb3BlcnRpZXM6IFBhcnRpYWw8Tm9kZVByb3BlcnRpZXM+XG4pIHtcbiAgc3dpdGNoKG5vZGUudHlwZSkge1xuICAgIGNhc2UgJ2V4cHJlc3Npb25fc3RhdGVtZW50JzpcbiAgICAgIHJldHVybiB2aXNpdEV4cHJlc3Npb25TdGF0ZW1lbnQoc291cmNlLCBub2RlLCBjb21tZW50LCBwcm9wZXJ0aWVzKTtcbiAgICBjYXNlICdleHBvcnRfc3RhdGVtZW50JzpcbiAgICAgIHJldHVybiB2aXNpdEV4cG9ydFN0YXRlbWVudChzb3VyY2UsIG5vZGUsIGNvbW1lbnQpO1xuICAgIGRlZmF1bHQ6XG4gICAgICBsb2cucmVwb3J0KHNvdXJjZSwgbm9kZSwgRXJyb3JUeXBlLk5vZGVUeXBlTm90WWV0U3VwcG9ydGVkKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2aXNpdEV4cHJlc3Npb25TdGF0ZW1lbnQoXG4gIHNvdXJjZTogU291cmNlLFxuICBub2RlOiBTeW50YXhOb2RlLFxuICBjb21tZW50OiBTeW50YXhOb2RlLFxuICBwcm9wZXJ0aWVzOiBQYXJ0aWFsPE5vZGVQcm9wZXJ0aWVzPlxuKSB7XG4gIHJldHVybiB2aXNpdE5vZGUoc291cmNlLCBub2RlLmNoaWxkcmVuLnNoaWZ0KCksIGNvbW1lbnQsIHByb3BlcnRpZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmlzaXRFeHBvcnRTdGF0ZW1lbnQoXG4gIHNvdXJjZTogU291cmNlLFxuICBub2RlOiBTeW50YXhOb2RlLFxuICBjb21tZW50OiBTeW50YXhOb2RlLFxuKSB7XG4gIGxldCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgaXNEZWZhdWx0RXhwb3J0ID0gZmFsc2U7XG5cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDEgJiYgbWF0Y2goY2hpbGRyZW4uc2hpZnQoKSwgJ2V4cG9ydCcpKSB7XG4gIH1cblxuICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSAmJiBtYXRjaChjaGlsZHJlbi5zaGlmdCgpLCAnZGVmYXVsdCcpKSB7XG4gICAgaXNEZWZhdWx0RXhwb3J0ID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gdmlzaXROb2RlKHNvdXJjZSwgY2hpbGRyZW4uc2hpZnQoKSwgY29tbWVudCwge1xuICAgIGV4cG9ydHM6IHtcbiAgICAgIGV4cG9ydDogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IGlzRGVmYXVsdEV4cG9ydFxuICAgIH1cbiAgfSk7XG59Il19