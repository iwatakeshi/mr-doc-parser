"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Node_1 = require("../Node");
const text_1 = require("../../../utils/text");
const call_signature_visitor_1 = require("./call_signature.visitor");
const match_1 = require("../../../utils/match");
function visitMethodDefinition(source, node, comment) {
    let method_definition = node.children;
    let accessibility = 'public', isAsync = false, identifier, type_parameters, formal_parameters, type_annotation;
    if (match_1.default(method_definition[0], 'async')) {
        isAsync = true;
        method_definition.shift();
    }
    if (match_1.default(method_definition[0], 'accessibility_modifier')) {
        accessibility = text_1.text(source, method_definition.shift());
    }
    if (match_1.default(method_definition[0], 'property_identifier')) {
        identifier = Node_1.createNode(source, method_definition.shift());
    }
    if (match_1.default(method_definition[0], 'call_signature')) {
        const call_signature = call_signature_visitor_1.visitCallSignature(source, method_definition.shift());
        type_parameters = call_signature.type_parameters;
        formal_parameters = call_signature.formal_parameters;
        type_annotation = call_signature.type_annotation;
    }
    return {
        type: 'method',
        context: Node_1.createNode(source, node),
        comment: Node_1.createNode(source, node, null, true),
        accessibility,
        async: isAsync,
        identifier,
        type_parameters,
        formal_parameters,
        type_annotation
    };
}
exports.visitMethodDefinition = visitMethodDefinition;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0aG9kX2RlZmluaXRpb24udmlzaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9sYW5nL3R5cGVzY3JpcHQvdmlzaXRvcnMvbWV0aG9kX2RlZmluaXRpb24udmlzaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUFxQztBQUVyQyw4Q0FBMkM7QUFDM0MscUVBQThEO0FBRTlELGdEQUF5QztBQUV6QyxTQUFnQixxQkFBcUIsQ0FBQyxNQUFhLEVBQUUsSUFBZ0IsRUFBRSxPQUFtQjtJQUN4RixJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdEMsSUFBSSxhQUFhLEdBQUcsUUFBUSxFQUMxQixPQUFPLEdBQUcsS0FBSyxFQUNmLFVBQVUsRUFDVixlQUFlLEVBQ2YsaUJBQWlCLEVBQ2pCLGVBQWUsQ0FBQztJQUVsQixJQUFJLGVBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBRTtRQUN4QyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ2YsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDM0I7SUFFRCxJQUFJLGVBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSx3QkFBd0IsQ0FBQyxFQUFFO1FBQ3pELGFBQWEsR0FBRyxXQUFJLENBQUMsTUFBTSxFQUFFLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7S0FDeEQ7SUFFRCxJQUFJLGVBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxFQUFFO1FBQ3RELFVBQVUsR0FBRyxpQkFBVSxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO0tBQzNEO0lBRUQsSUFBSSxlQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsRUFBRTtRQUNqRCxNQUFNLGNBQWMsR0FBRywyQ0FBa0IsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtRQUM1RSxlQUFlLEdBQUcsY0FBYyxDQUFDLGVBQWUsQ0FBQztRQUNqRCxpQkFBaUIsR0FBRyxjQUFjLENBQUMsaUJBQWlCLENBQUM7UUFDckQsZUFBZSxHQUFHLGNBQWMsQ0FBQyxlQUFlLENBQUM7S0FDbEQ7SUFDRCxPQUFPO1FBQ0wsSUFBSSxFQUFFLFFBQVE7UUFDZCxPQUFPLEVBQUUsaUJBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO1FBQ2pDLE9BQU8sRUFBRSxpQkFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztRQUM3QyxhQUFhO1FBQ2IsS0FBSyxFQUFFLE9BQU87UUFDZCxVQUFVO1FBQ1YsZUFBZTtRQUNmLGlCQUFpQjtRQUNqQixlQUFlO0tBQ2hCLENBQUE7QUFDSCxDQUFDO0FBdkNELHNEQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZU5vZGUgfSBmcm9tIFwiLi4vTm9kZVwiO1xyXG5pbXBvcnQgeyBTeW50YXhOb2RlIH0gZnJvbSBcInRyZWUtc2l0dGVyXCI7XHJcbmltcG9ydCB7IHRleHQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdGV4dFwiO1xyXG5pbXBvcnQgeyB2aXNpdENhbGxTaWduYXR1cmUgfSBmcm9tIFwiLi9jYWxsX3NpZ25hdHVyZS52aXNpdG9yXCI7XHJcbmltcG9ydCBJRmlsZSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJmYWNlcy9JRmlsZVwiO1xyXG5pbXBvcnQgbWF0Y2ggZnJvbSBcIi4uLy4uLy4uL3V0aWxzL21hdGNoXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdmlzaXRNZXRob2REZWZpbml0aW9uKHNvdXJjZTogSUZpbGUsIG5vZGU6IFN5bnRheE5vZGUsIGNvbW1lbnQ6IFN5bnRheE5vZGUpIHtcclxuICBsZXQgbWV0aG9kX2RlZmluaXRpb24gPSBub2RlLmNoaWxkcmVuO1xyXG4gIGxldCBhY2Nlc3NpYmlsaXR5ID0gJ3B1YmxpYycsXHJcbiAgICBpc0FzeW5jID0gZmFsc2UsXHJcbiAgICBpZGVudGlmaWVyLFxyXG4gICAgdHlwZV9wYXJhbWV0ZXJzLFxyXG4gICAgZm9ybWFsX3BhcmFtZXRlcnMsXHJcbiAgICB0eXBlX2Fubm90YXRpb247XHJcblxyXG4gIGlmIChtYXRjaChtZXRob2RfZGVmaW5pdGlvblswXSwgJ2FzeW5jJykpIHtcclxuICAgIGlzQXN5bmMgPSB0cnVlO1xyXG4gICAgbWV0aG9kX2RlZmluaXRpb24uc2hpZnQoKTtcclxuICB9XHJcbiAgXHJcbiAgaWYgKG1hdGNoKG1ldGhvZF9kZWZpbml0aW9uWzBdLCAnYWNjZXNzaWJpbGl0eV9tb2RpZmllcicpKSB7XHJcbiAgICBhY2Nlc3NpYmlsaXR5ID0gdGV4dChzb3VyY2UsIG1ldGhvZF9kZWZpbml0aW9uLnNoaWZ0KCkpXHJcbiAgfVxyXG5cclxuICBpZiAobWF0Y2gobWV0aG9kX2RlZmluaXRpb25bMF0sICdwcm9wZXJ0eV9pZGVudGlmaWVyJykpIHtcclxuICAgIGlkZW50aWZpZXIgPSBjcmVhdGVOb2RlKHNvdXJjZSwgbWV0aG9kX2RlZmluaXRpb24uc2hpZnQoKSlcclxuICB9XHJcblxyXG4gIGlmIChtYXRjaChtZXRob2RfZGVmaW5pdGlvblswXSwgJ2NhbGxfc2lnbmF0dXJlJykpIHtcclxuICAgIGNvbnN0IGNhbGxfc2lnbmF0dXJlID0gdmlzaXRDYWxsU2lnbmF0dXJlKHNvdXJjZSwgbWV0aG9kX2RlZmluaXRpb24uc2hpZnQoKSlcclxuICAgIHR5cGVfcGFyYW1ldGVycyA9IGNhbGxfc2lnbmF0dXJlLnR5cGVfcGFyYW1ldGVycztcclxuICAgIGZvcm1hbF9wYXJhbWV0ZXJzID0gY2FsbF9zaWduYXR1cmUuZm9ybWFsX3BhcmFtZXRlcnM7XHJcbiAgICB0eXBlX2Fubm90YXRpb24gPSBjYWxsX3NpZ25hdHVyZS50eXBlX2Fubm90YXRpb247XHJcbiAgfVxyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiAnbWV0aG9kJyxcclxuICAgIGNvbnRleHQ6IGNyZWF0ZU5vZGUoc291cmNlLCBub2RlKSxcclxuICAgIGNvbW1lbnQ6IGNyZWF0ZU5vZGUoc291cmNlLCBub2RlLCBudWxsLCB0cnVlKSxcclxuICAgIGFjY2Vzc2liaWxpdHksXHJcbiAgICBhc3luYzogaXNBc3luYywgXHJcbiAgICBpZGVudGlmaWVyLFxyXG4gICAgdHlwZV9wYXJhbWV0ZXJzLFxyXG4gICAgZm9ybWFsX3BhcmFtZXRlcnMsXHJcbiAgICB0eXBlX2Fubm90YXRpb25cclxuICB9XHJcbn0iXX0=