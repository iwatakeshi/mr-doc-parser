"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Node_1 = require("../Node");
const text_1 = require("../../../utils/text");
const call_signature_visitor_1 = require("./call_signature.visitor");
const match_1 = require("../../../utils/match");
function visitMethodDefinition(source, node, comment) {
    let method_definition = node.children;
    let accessibility = 'public', isAsync = false, identifier, type_parameters, formal_parameters, type_annotation;
    if (match_1.default(method_definition[0], 'async')) {
        isAsync = true;
        method_definition.shift();
    }
    if (match_1.default(method_definition[0], 'accessibility_modifier')) {
        accessibility = text_1.text(source, method_definition.shift());
    }
    if (match_1.default(method_definition[0], 'property_identifier')) {
        identifier = Node_1.createNode(source, method_definition.shift());
    }
    if (match_1.default(method_definition[0], 'call_signature')) {
        const call_signature = call_signature_visitor_1.visitCallSignature(source, method_definition.shift());
        type_parameters = call_signature.type_parameters;
        formal_parameters = call_signature.formal_parameters;
        type_annotation = call_signature.type_annotation;
    }
    return {
        type: 'method',
        context: Node_1.createNode(source, node),
        comment: Node_1.createNode(source, node, null, true),
        accessibility,
        async: isAsync,
        identifier,
        type_parameters,
        formal_parameters,
        type_annotation
    };
}
exports.visitMethodDefinition = visitMethodDefinition;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0aG9kX2RlZmluaXRpb24udmlzaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9sYW5nL3R5cGVzY3JpcHQvdmlzaXRvcnMvbWV0aG9kX2RlZmluaXRpb24udmlzaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUFxQztBQUVyQyw4Q0FBMkM7QUFDM0MscUVBQThEO0FBRTlELGdEQUF5QztBQUV6QyxTQUFnQixxQkFBcUIsQ0FBQyxNQUFjLEVBQUUsSUFBZ0IsRUFBRSxPQUFtQjtJQUN6RixJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdEMsSUFBSSxhQUFhLEdBQUcsUUFBUSxFQUMxQixPQUFPLEdBQUcsS0FBSyxFQUNmLFVBQVUsRUFDVixlQUFlLEVBQ2YsaUJBQWlCLEVBQ2pCLGVBQWUsQ0FBQztJQUVsQixJQUFJLGVBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBRTtRQUN4QyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ2YsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDM0I7SUFFRCxJQUFJLGVBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSx3QkFBd0IsQ0FBQyxFQUFFO1FBQ3pELGFBQWEsR0FBRyxXQUFJLENBQUMsTUFBTSxFQUFFLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7S0FDeEQ7SUFFRCxJQUFJLGVBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxFQUFFO1FBQ3RELFVBQVUsR0FBRyxpQkFBVSxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO0tBQzNEO0lBRUQsSUFBSSxlQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsRUFBRTtRQUNqRCxNQUFNLGNBQWMsR0FBRywyQ0FBa0IsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtRQUM1RSxlQUFlLEdBQUcsY0FBYyxDQUFDLGVBQWUsQ0FBQztRQUNqRCxpQkFBaUIsR0FBRyxjQUFjLENBQUMsaUJBQWlCLENBQUM7UUFDckQsZUFBZSxHQUFHLGNBQWMsQ0FBQyxlQUFlLENBQUM7S0FDbEQ7SUFDRCxPQUFPO1FBQ0wsSUFBSSxFQUFFLFFBQVE7UUFDZCxPQUFPLEVBQUUsaUJBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO1FBQ2pDLE9BQU8sRUFBRSxpQkFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztRQUM3QyxhQUFhO1FBQ2IsS0FBSyxFQUFFLE9BQU87UUFDZCxVQUFVO1FBQ1YsZUFBZTtRQUNmLGlCQUFpQjtRQUNqQixlQUFlO0tBQ2hCLENBQUE7QUFDSCxDQUFDO0FBdkNELHNEQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZU5vZGUgfSBmcm9tIFwiLi4vTm9kZVwiO1xuaW1wb3J0IHsgU3ludGF4Tm9kZSB9IGZyb20gXCJ0cmVlLXNpdHRlclwiO1xuaW1wb3J0IHsgdGV4dCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy90ZXh0XCI7XG5pbXBvcnQgeyB2aXNpdENhbGxTaWduYXR1cmUgfSBmcm9tIFwiLi9jYWxsX3NpZ25hdHVyZS52aXNpdG9yXCI7XG5pbXBvcnQgU291cmNlIGZyb20gXCIuLi8uLi8uLi9pbnRlcmZhY2VzL1NvdXJjZVwiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuLi8uLi8uLi91dGlscy9tYXRjaFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdmlzaXRNZXRob2REZWZpbml0aW9uKHNvdXJjZTogU291cmNlLCBub2RlOiBTeW50YXhOb2RlLCBjb21tZW50OiBTeW50YXhOb2RlKSB7XG4gIGxldCBtZXRob2RfZGVmaW5pdGlvbiA9IG5vZGUuY2hpbGRyZW47XG4gIGxldCBhY2Nlc3NpYmlsaXR5ID0gJ3B1YmxpYycsXG4gICAgaXNBc3luYyA9IGZhbHNlLFxuICAgIGlkZW50aWZpZXIsXG4gICAgdHlwZV9wYXJhbWV0ZXJzLFxuICAgIGZvcm1hbF9wYXJhbWV0ZXJzLFxuICAgIHR5cGVfYW5ub3RhdGlvbjtcblxuICBpZiAobWF0Y2gobWV0aG9kX2RlZmluaXRpb25bMF0sICdhc3luYycpKSB7XG4gICAgaXNBc3luYyA9IHRydWU7XG4gICAgbWV0aG9kX2RlZmluaXRpb24uc2hpZnQoKTtcbiAgfVxuICBcbiAgaWYgKG1hdGNoKG1ldGhvZF9kZWZpbml0aW9uWzBdLCAnYWNjZXNzaWJpbGl0eV9tb2RpZmllcicpKSB7XG4gICAgYWNjZXNzaWJpbGl0eSA9IHRleHQoc291cmNlLCBtZXRob2RfZGVmaW5pdGlvbi5zaGlmdCgpKVxuICB9XG5cbiAgaWYgKG1hdGNoKG1ldGhvZF9kZWZpbml0aW9uWzBdLCAncHJvcGVydHlfaWRlbnRpZmllcicpKSB7XG4gICAgaWRlbnRpZmllciA9IGNyZWF0ZU5vZGUoc291cmNlLCBtZXRob2RfZGVmaW5pdGlvbi5zaGlmdCgpKVxuICB9XG5cbiAgaWYgKG1hdGNoKG1ldGhvZF9kZWZpbml0aW9uWzBdLCAnY2FsbF9zaWduYXR1cmUnKSkge1xuICAgIGNvbnN0IGNhbGxfc2lnbmF0dXJlID0gdmlzaXRDYWxsU2lnbmF0dXJlKHNvdXJjZSwgbWV0aG9kX2RlZmluaXRpb24uc2hpZnQoKSlcbiAgICB0eXBlX3BhcmFtZXRlcnMgPSBjYWxsX3NpZ25hdHVyZS50eXBlX3BhcmFtZXRlcnM7XG4gICAgZm9ybWFsX3BhcmFtZXRlcnMgPSBjYWxsX3NpZ25hdHVyZS5mb3JtYWxfcGFyYW1ldGVycztcbiAgICB0eXBlX2Fubm90YXRpb24gPSBjYWxsX3NpZ25hdHVyZS50eXBlX2Fubm90YXRpb247XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnbWV0aG9kJyxcbiAgICBjb250ZXh0OiBjcmVhdGVOb2RlKHNvdXJjZSwgbm9kZSksXG4gICAgY29tbWVudDogY3JlYXRlTm9kZShzb3VyY2UsIG5vZGUsIG51bGwsIHRydWUpLFxuICAgIGFjY2Vzc2liaWxpdHksXG4gICAgYXN5bmM6IGlzQXN5bmMsIFxuICAgIGlkZW50aWZpZXIsXG4gICAgdHlwZV9wYXJhbWV0ZXJzLFxuICAgIGZvcm1hbF9wYXJhbWV0ZXJzLFxuICAgIHR5cGVfYW5ub3RhdGlvblxuICB9XG59Il19