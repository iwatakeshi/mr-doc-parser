"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const text_1 = require("../../utils/text");
const range_1 = require("../../utils/range");
const xdoc_parser_1 = require("xdoc-parser");
const _ = require("lodash");
function isASTNode(object) {
    return object && 'type' in object && 'text' in object && 'children' in object;
}
exports.isASTNode = isASTNode;
function createASTNode(source, node, arg1, arg2) {
    let context, children = [], document = typeof arg2 === 'boolean' && arg2 === true, properties;
    if (_.isPlainObject(arg1) && !isASTNode(arg1)) {
        properties = arg1;
    }
    else if (_.isPlainObject(arg1) && isASTNode(arg1)) {
        context = arg1;
    }
    else if (_.isArray(arg1)) {
        children = arg1;
    }
    if (_.isPlainObject(arg2)) {
        properties = arg2;
    }
    return Object.assign({ type: node.type, text: text_1.text(source, node) }, range_1.default(node), { context,
        children, comment: document ? xdoc_parser_1.default(source.text).parse() : undefined, properties });
}
exports.createASTNode = createASTNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xhbmcvY29tbW9uL2FzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLDJDQUF3QztBQUN4Qyw2Q0FBc0M7QUFHdEMsNkNBQStCO0FBQy9CLDRCQUEyQjtBQWlDM0IsU0FBZ0IsU0FBUyxDQUFDLE1BQWM7SUFDdEMsT0FBTyxNQUFNLElBQUksTUFBTSxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksTUFBTSxJQUFJLFVBQVUsSUFBSSxNQUFNLENBQUM7QUFDaEYsQ0FBQztBQUZELDhCQUVDO0FBT0QsU0FBZ0IsYUFBYSxDQUFDLE1BQWMsRUFBRSxJQUFnQixFQUFFLElBQVUsRUFBRSxJQUFVO0lBRXBGLElBQUksT0FBTyxFQUFFLFFBQVEsR0FBRyxFQUFFLEVBQUUsUUFBUSxHQUFHLE9BQU8sSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFLFVBQVUsQ0FBQztJQUU5RixJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDN0MsVUFBVSxHQUFHLElBQUksQ0FBQztLQUNuQjtTQUFNLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDbkQsT0FBTyxHQUFHLElBQUksQ0FBQztLQUNoQjtTQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxQixRQUFRLEdBQUcsSUFBSSxDQUFDO0tBQ2pCO0lBRUQsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3pCLFVBQVUsR0FBRyxJQUFJLENBQUM7S0FDbkI7SUFFRCx1QkFDRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFDZixJQUFJLEVBQUUsV0FBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFDckIsZUFBSyxDQUFDLElBQUksQ0FBQyxJQUNkLE9BQU87UUFDUCxRQUFRLEVBQ1IsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMscUJBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFDekQsVUFBVSxJQUNYO0FBQ0gsQ0FBQztBQXpCRCxzQ0F5QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb2N1bWVudGF0aW9uTm9kZSB9IGZyb20gJ3hkb2MtcGFyc2VyL3NyYy9YRG9jQVNUTm9kZSc7XG5pbXBvcnQgeyBSZW1hcmtOb2RlIH0gZnJvbSAneGRvYy1wYXJzZXIvc3JjL1hEb2NQYXJzZXInO1xuaW1wb3J0IHsgU3ludGF4Tm9kZSB9IGZyb20gXCJ0cmVlLXNpdHRlclwiO1xuaW1wb3J0IHsgdGV4dCB9IGZyb20gXCIuLi8uLi91dGlscy90ZXh0XCI7XG5pbXBvcnQgcmFuZ2UgZnJvbSBcIi4uLy4uL3V0aWxzL3JhbmdlXCI7XG5pbXBvcnQgU291cmNlIGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL1NvdXJjZVwiO1xuaW1wb3J0IFRleHRSYW5nZSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9UZXh0UmFuZ2VcIjtcbmltcG9ydCB4ZG9jIGZyb20gJ3hkb2MtcGFyc2VyJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJ1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQVNUTm9kZSBleHRlbmRzIFRleHRSYW5nZSB7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkgLSBUaGUgdHlwZSBvZiBub2RlLlxuICAgKi9cbiAgdHlwZTogc3RyaW5nLFxuICAvKipcbiAgICogQHByb3BlcnR5IC0gVGhlIGNvbnRleHQgc3RyaW5nLlxuICAgKi9cbiAgdGV4dDogc3RyaW5nLFxuICAvKipcbiAgICogQHByb3BlcnR5IC0gVGhlIG5vZGUncyBjaGlsZHJlbi5cbiAgICovXG4gIGNoaWxkcmVuOiBBU1ROb2RlW10gfCB1bmRlZmluZWRbXSxcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSAtIFRoZSBjb250ZXh0IG5vZGUgdGhhdCBhIGNvbW1lbnQgbm9kZSByZWZlcnMgdG8uXG4gICAqL1xuICBjb250ZXh0OiBBU1ROb2RlLFxuICAvKipcbiAgICogQHByb3BlcnR5IC0gVGhlIHByb3BlcnRpZXMgdGhhdCBhIEFTVE5vZGUgbWF5IHBvc3Nlc3MuXG4gICAqL1xuICBwcm9wZXJ0aWVzPzogb2JqZWN0XG4gIC8qKlxuICAgKiBAcHJvcGVydHkgLSBUaGUgcGFyc2VkIFhEb2MgY29tbWVudC5cbiAgICovXG4gIGNvbW1lbnQ/OiB7XG4gICAgbWFya2Rvd246IFJlbWFya05vZGUsXG4gICAgZG9jdW1lbnRhdGlvbjogUGFydGlhbDxEb2N1bWVudGF0aW9uTm9kZT5cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBU1ROb2RlKG9iamVjdDogb2JqZWN0KTogb2JqZWN0IGlzIEFTVE5vZGUge1xuICByZXR1cm4gb2JqZWN0ICYmICd0eXBlJyBpbiBvYmplY3QgJiYgJ3RleHQnIGluIG9iamVjdCAmJiAnY2hpbGRyZW4nIGluIG9iamVjdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFTVE5vZGUoc291cmNlOiBTb3VyY2UsIG5vZGU6IFN5bnRheE5vZGUpOiBBU1ROb2RlXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQVNUTm9kZShzb3VyY2U6IFNvdXJjZSwgbm9kZTogU3ludGF4Tm9kZSwgcHJvcGVydGllczogb2JqZWN0KVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFTVE5vZGUoc291cmNlOiBTb3VyY2UsIG5vZGU6IFN5bnRheE5vZGUsIGNoaWxkcmVuOiBvYmplY3RbXSk6IEFTVE5vZGVcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBU1ROb2RlKHNvdXJjZTogU291cmNlLCBub2RlOiBTeW50YXhOb2RlLCBjaGlsZHJlbjogb2JqZWN0W10sIHByb3BlcnRpZXM6IG9iamVjdClcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBU1ROb2RlKHNvdXJjZTogU291cmNlLCBub2RlOiBTeW50YXhOb2RlLCBjb250ZXh0OiBBU1ROb2RlLCBkb2N1bWVudDogYm9vbGVhbik6IEFTVE5vZGVcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBU1ROb2RlKHNvdXJjZTogU291cmNlLCBub2RlOiBTeW50YXhOb2RlLCBhcmcxPzogYW55LCBhcmcyPzogYW55KTogQVNUTm9kZSB7XG5cbiAgbGV0IGNvbnRleHQsIGNoaWxkcmVuID0gW10sIGRvY3VtZW50ID0gdHlwZW9mIGFyZzIgPT09ICdib29sZWFuJyAmJiBhcmcyID09PSB0cnVlLCBwcm9wZXJ0aWVzO1xuXG4gIGlmIChfLmlzUGxhaW5PYmplY3QoYXJnMSkgJiYgIWlzQVNUTm9kZShhcmcxKSkge1xuICAgIHByb3BlcnRpZXMgPSBhcmcxO1xuICB9IGVsc2UgaWYgKF8uaXNQbGFpbk9iamVjdChhcmcxKSAmJiBpc0FTVE5vZGUoYXJnMSkpIHtcbiAgICBjb250ZXh0ID0gYXJnMTtcbiAgfSBlbHNlIGlmIChfLmlzQXJyYXkoYXJnMSkpIHtcbiAgICBjaGlsZHJlbiA9IGFyZzE7XG4gIH1cblxuICBpZiAoXy5pc1BsYWluT2JqZWN0KGFyZzIpKSB7XG4gICAgcHJvcGVydGllcyA9IGFyZzI7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6IG5vZGUudHlwZSxcbiAgICB0ZXh0OiB0ZXh0KHNvdXJjZSwgbm9kZSksXG4gICAgLi4ucmFuZ2Uobm9kZSksXG4gICAgY29udGV4dCxcbiAgICBjaGlsZHJlbixcbiAgICBjb21tZW50OiBkb2N1bWVudCA/IHhkb2Moc291cmNlLnRleHQpLnBhcnNlKCkgOiB1bmRlZmluZWQsXG4gICAgcHJvcGVydGllcyxcbiAgfVxufVxuIl19