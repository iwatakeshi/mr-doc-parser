"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const text_1 = require("../../utils/text");
const range_1 = require("../../utils/range");
const xdoc_parser_1 = require("xdoc-parser");
function createASTNode(source, node, arg1, arg2) {
    let context, children = [], document = typeof arg2 === 'boolean' && arg2 === true, properties;
    if (Array.isArray(arg1))
        children = arg1;
    else
        context = arg1;
    if (typeof arg2 === 'object') {
        properties = arg2;
    }
    return Object.assign({ type: node.type, text: text_1.text(source, node) }, range_1.default(node), { context,
        children, comment: document ? xdoc_parser_1.default(source.text).parse() : undefined, properties });
}
exports.createASTNode = createASTNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xhbmcvY29tbW9uL2FzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLDJDQUF3QztBQUN4Qyw2Q0FBc0M7QUFHdEMsNkNBQStCO0FBcUMvQixTQUFnQixhQUFhLENBQUMsTUFBYyxFQUFFLElBQWdCLEVBQUUsSUFBVSxFQUFFLElBQVU7SUFFcEYsSUFBSSxPQUFPLEVBQUUsUUFBUSxHQUFHLEVBQUUsRUFBRSxRQUFRLEdBQUcsT0FBTyxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUUsVUFBVSxDQUFDO0lBQzlGLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFBRSxRQUFRLEdBQUcsSUFBSSxDQUFDOztRQUNwQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBRXBCLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzVCLFVBQVUsR0FBRyxJQUFJLENBQUM7S0FDbkI7SUFFRCx1QkFDRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFDZixJQUFJLEVBQUUsV0FBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFDckIsZUFBSyxDQUFDLElBQUksQ0FBQyxJQUNkLE9BQU87UUFDUCxRQUFRLEVBQ1IsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMscUJBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFDekQsVUFBVSxJQUNYO0FBQ0gsQ0FBQztBQW5CRCxzQ0FtQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb2N1bWVudGF0aW9uTm9kZSB9IGZyb20gJ3hkb2MtcGFyc2VyL3NyYy9YRG9jQVNUTm9kZSc7XHJcbmltcG9ydCB7IFJlbWFya05vZGUgfSBmcm9tICd4ZG9jLXBhcnNlci9zcmMvWERvY1BhcnNlcic7XHJcbmltcG9ydCB7IFN5bnRheE5vZGUgfSBmcm9tIFwidHJlZS1zaXR0ZXJcIjtcclxuaW1wb3J0IHsgdGV4dCB9IGZyb20gXCIuLi8uLi91dGlscy90ZXh0XCI7XHJcbmltcG9ydCByYW5nZSBmcm9tIFwiLi4vLi4vdXRpbHMvcmFuZ2VcIjtcclxuaW1wb3J0IFNvdXJjZSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9Tb3VyY2VcIjtcclxuaW1wb3J0IFRleHRSYW5nZSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9UZXh0UmFuZ2VcIjtcclxuaW1wb3J0IHhkb2MgZnJvbSAneGRvYy1wYXJzZXInO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQVNUTm9kZSBleHRlbmRzIFRleHRSYW5nZSB7XHJcbiAgLyoqXHJcbiAgICogQHByb3BlcnR5IC0gVGhlIHR5cGUgb2Ygbm9kZS5cclxuICAgKi9cclxuICB0eXBlOiBzdHJpbmcsXHJcbiAgLyoqXHJcbiAgICogQHByb3BlcnR5IC0gVGhlIGNvbnRleHQgc3RyaW5nLlxyXG4gICAqL1xyXG4gIHRleHQ6IHN0cmluZyxcclxuICAvKipcclxuICAgKiBAcHJvcGVydHkgLSBUaGUgbm9kZSdzIGNoaWxkcmVuLlxyXG4gICAqL1xyXG4gIGNoaWxkcmVuOiBBU1ROb2RlW10gfCB1bmRlZmluZWRbXSxcclxuICAvKipcclxuICAgKiBAcHJvcGVydHkgLSBUaGUgY29udGV4dCBub2RlIHRoYXQgYSBjb21tZW50IG5vZGUgcmVmZXJzIHRvLlxyXG4gICAqL1xyXG4gIGNvbnRleHQ6IEFTVE5vZGUsXHJcbiAgLyoqXHJcbiAgICogQHByb3BlcnR5IC0gVGhlIHByb3BlcnRpZXMgdGhhdCBhIEFTVE5vZGUgbWF5IHBvc3Nlc3MuXHJcbiAgICovXHJcbiAgcHJvcGVydGllcz86IG9iamVjdFxyXG4gIC8qKlxyXG4gICAqIEBwcm9wZXJ0eSAtIFRoZSBwYXJzZWQgWERvYyBjb21tZW50LlxyXG4gICAqL1xyXG4gIGNvbW1lbnQ/OiB7XHJcbiAgICBtYXJrZG93bjogUmVtYXJrTm9kZSxcclxuICAgIGRvY3VtZW50YXRpb246IFBhcnRpYWw8RG9jdW1lbnRhdGlvbk5vZGU+XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQVNUTm9kZShzb3VyY2U6IFNvdXJjZSwgbm9kZTogU3ludGF4Tm9kZSk6IEFTVE5vZGVcclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFTVE5vZGUoc291cmNlOiBTb3VyY2UsIG5vZGU6IFN5bnRheE5vZGUsIGNoaWxkcmVuOiBvYmplY3RbXSk6IEFTVE5vZGVcclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFTVE5vZGUoc291cmNlOiBTb3VyY2UsIG5vZGU6IFN5bnRheE5vZGUsIGNoaWxkcmVuOiBvYmplY3RbXSwgcHJvcGVydGllczogb2JqZWN0KVxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQVNUTm9kZShzb3VyY2U6IFNvdXJjZSwgbm9kZTogU3ludGF4Tm9kZSwgY29udGV4dDogQVNUTm9kZSwgZG9jdW1lbnQ6IGJvb2xlYW4pOiBBU1ROb2RlIFxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQVNUTm9kZShzb3VyY2U6IFNvdXJjZSwgbm9kZTogU3ludGF4Tm9kZSwgYXJnMT86IGFueSwgYXJnMj86IGFueSk6IEFTVE5vZGUge1xyXG5cclxuICBsZXQgY29udGV4dCwgY2hpbGRyZW4gPSBbXSwgZG9jdW1lbnQgPSB0eXBlb2YgYXJnMiA9PT0gJ2Jvb2xlYW4nICYmIGFyZzIgPT09IHRydWUsIHByb3BlcnRpZXM7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMSkpIGNoaWxkcmVuID0gYXJnMTtcclxuICBlbHNlIGNvbnRleHQgPSBhcmcxO1xyXG5cclxuICBpZiAodHlwZW9mIGFyZzIgPT09ICdvYmplY3QnKSB7XHJcbiAgICBwcm9wZXJ0aWVzID0gYXJnMjtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiBub2RlLnR5cGUsXHJcbiAgICB0ZXh0OiB0ZXh0KHNvdXJjZSwgbm9kZSksXHJcbiAgICAuLi5yYW5nZShub2RlKSxcclxuICAgIGNvbnRleHQsXHJcbiAgICBjaGlsZHJlbixcclxuICAgIGNvbW1lbnQ6IGRvY3VtZW50ID8geGRvYyhzb3VyY2UudGV4dCkucGFyc2UoKSA6IHVuZGVmaW5lZCxcclxuICAgIHByb3BlcnRpZXMsXHJcbiAgfVxyXG59XHJcbiJdfQ==