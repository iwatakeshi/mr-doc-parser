"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TreeSitter = require("tree-sitter");
const JavaScript = require("tree-sitter-javascript");
const parser_1 = require("../common/parser");
const visitor_1 = require("./visitor");
const walk_1 = require("../../utils/walk");
/**
 * A class that parses JavaScript comments.
 *
 * # API
 *
 * @class JavaScriptParser
 * @implements IParser
 * @export default
 */
class JavaScriptParser extends parser_1.default {
    constructor(source, options) {
        super(source, options);
        this.parser = new TreeSitter();
        this.parser.setLanguage(JavaScript);
        this.tree_ = this.parser.parse(this.source.text);
    }
    parse() {
        const visitor = new visitor_1.JavaScriptVisitor(this.source);
        const nodes = walk_1.default(this.tree_.rootNode);
        nodes.visit(visitor);
        return visitor.getAST();
    }
    get tree() {
        return this.tree_;
    }
}
exports.default = JavaScriptParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGFuZy9qYXZhc2NyaXB0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMENBQTBDO0FBQzFDLHFEQUFxRDtBQUNyRCw2Q0FBc0M7QUFFdEMsdUNBQThDO0FBQzlDLDJDQUFvQztBQUdwQzs7Ozs7Ozs7R0FRRztBQUNILE1BQXFCLGdCQUFpQixTQUFRLGdCQUFNO0lBR2xELFlBQVksTUFBYyxFQUFFLE9BQVk7UUFDdEMsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFDRCxLQUFLO1FBQ0gsTUFBTSxPQUFPLEdBQUcsSUFBSSwyQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkQsTUFBTSxLQUFLLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNwQixPQUFPLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBQ0QsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7Q0FDRjtBQWxCRCxtQ0FrQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUcmVlU2l0dGVyIGZyb20gJ3RyZWUtc2l0dGVyJztcclxuaW1wb3J0ICogYXMgSmF2YVNjcmlwdCBmcm9tICd0cmVlLXNpdHRlci1qYXZhc2NyaXB0JztcclxuaW1wb3J0IFBhcnNlciBmcm9tICcuLi9jb21tb24vcGFyc2VyJztcclxuaW1wb3J0IFNvdXJjZSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL1NvdXJjZSc7XHJcbmltcG9ydCB7IEphdmFTY3JpcHRWaXNpdG9yIH0gZnJvbSAnLi92aXNpdG9yJztcclxuaW1wb3J0IHdhbGsgZnJvbSAnLi4vLi4vdXRpbHMvd2Fsayc7XHJcbmltcG9ydCBBU1ROb2RlIGZyb20gJy4uLy4uL2ludGVyZmFjZXMvQVNUTm9kZSc7XHJcblxyXG4vKipcclxuICogQSBjbGFzcyB0aGF0IHBhcnNlcyBKYXZhU2NyaXB0IGNvbW1lbnRzLlxyXG4gKiBcclxuICogIyBBUElcclxuICogXHJcbiAqIEBjbGFzcyBKYXZhU2NyaXB0UGFyc2VyXHJcbiAqIEBpbXBsZW1lbnRzIElQYXJzZXJcclxuICogQGV4cG9ydCBkZWZhdWx0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKYXZhU2NyaXB0UGFyc2VyIGV4dGVuZHMgUGFyc2VyIHtcclxuICBwcml2YXRlIHBhcnNlcjogVHJlZVNpdHRlcjtcclxuICBwcml2YXRlIHRyZWVfOiBUcmVlU2l0dGVyLlRyZWU7XHJcbiAgY29uc3RydWN0b3Ioc291cmNlOiBTb3VyY2UsIG9wdGlvbnM6IGFueSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIHRoaXMucGFyc2VyID0gbmV3IFRyZWVTaXR0ZXIoKTtcclxuICAgIHRoaXMucGFyc2VyLnNldExhbmd1YWdlKEphdmFTY3JpcHQpO1xyXG4gICAgdGhpcy50cmVlXyA9IHRoaXMucGFyc2VyLnBhcnNlKHRoaXMuc291cmNlLnRleHQpO1xyXG4gIH1cclxuICBwYXJzZSgpOiBBU1ROb2RlW10ge1xyXG4gICAgY29uc3QgdmlzaXRvciA9IG5ldyBKYXZhU2NyaXB0VmlzaXRvcih0aGlzLnNvdXJjZSk7XHJcbiAgICBjb25zdCBub2RlcyA9IHdhbGsodGhpcy50cmVlXy5yb290Tm9kZSk7XHJcbiAgICBub2Rlcy52aXNpdCh2aXNpdG9yKVxyXG4gICAgcmV0dXJuIHZpc2l0b3IuZ2V0QVNUKCk7XHJcbiAgfVxyXG4gIGdldCB0cmVlICgpOiBUcmVlU2l0dGVyLlRyZWUge1xyXG4gICAgcmV0dXJuIHRoaXMudHJlZV87XHJcbiAgfVxyXG59Il19